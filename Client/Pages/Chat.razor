@page "/chat"
@using Shared
@using Newtonsoft.Json
@using System.Net.Http.Headers
@using System.Text
@inject HttpClient Http

<h3>Chat</h3>

<div>
    <input @bind="Username" placeholder="Indtast brugernavn" />
</div>

<div>
    <input @bind="NewMessage" placeholder="Skriv en besked..." />
    <button @onclick="SendMessage" disabled="@isSending">
        @(isSending ? "Sender..." : "Send")
    </button>
</div>

@if (isSending)
{
    <p><em>Sender besked...</em></p>
}

<ul>
    @foreach (var message in Messages)
    {
        <li>
            <strong>@message.User:</strong> @message.Message
            <small>(@message.Timestamp.ToLocalTime().ToString("HH:mm:ss"))</small> <!-- 🕒 Vis timestamp -->
        </li>
    }
</ul>

@code {
    private string Username { get; set; } = "";
    private string NewMessage { get; set; } = "";
    private List<ChatMessage> Messages { get; set; } = new();
    private bool isSending = false;
    private CancellationTokenSource? cancellationTokenSource;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(NewMessage))
            return;

        var message = new ChatMessage
            {
                User = Username,
                Message = NewMessage + " 🙂",
                Timestamp = DateTime.UtcNow
            };

        string jsonMessage = JsonConvert.SerializeObject(message);
        Console.WriteLine($"📤 Sender JSON: {jsonMessage}");

        isSending = true;
        StateHasChanged();

        try
        {
            var content = new StringContent(jsonMessage, Encoding.UTF8);
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            var response = await Http.PostAsync("/api/SendMessage", content);


            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"❌ Fejl ved afsendelse: {response.StatusCode} - {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Exception ved afsendelse: {ex.Message}");
        }

        NewMessage = "";

        await Task.Delay(3000); // Simulerer forsinkelse på 3 sekunder

        await LoadMessages();

        isSending = false;
        StateHasChanged();
    }

    private async Task LoadMessages()
    {
        try
        {
            var response = await Http.GetStringAsync("/api/GetMessages");
            Console.WriteLine($"📥 Modtaget JSON: {response}");

            var newMessages = JsonConvert.DeserializeObject<List<ChatMessage>>(response) ?? new();

            if (!Messages.SequenceEqual(newMessages, new ChatMessageComparer()))
            {
                Messages = newMessages;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Fejl ved hentning af beskeder: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cancellationTokenSource = new CancellationTokenSource();

        // Start baggrundsopgave der opdaterer beskeder hver 5. sekund
        _ = Task.Run(async () =>
        {
            while (!cancellationTokenSource.Token.IsCancellationRequested)
            {
                await LoadMessages();
                await Task.Delay(5000, cancellationTokenSource.Token);
            }
        });
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
    }
}
