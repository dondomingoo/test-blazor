@page "/chat"
@using Shared

<h3>Chat</h3>

<div>
    <input @bind="Username" placeholder="Indtast brugernavn" />
</div>

<div>
    <input @bind="NewMessage" placeholder="Skriv en besked..." />
    <button @onclick="SendMessage" disabled="@isSending">@(isSending ? "Sender..." : "Send")</button>
</div>

<ul>
    @foreach (var message in Messages)
    {
        <li><strong>@message.User:</strong> @message.Message</li>
    }
</ul>

@code {
    private string Username { get; set; } = "";
    private string NewMessage { get; set; } = "";
    private List<ChatMessage> Messages { get; set; } = new();
    private bool isSending = false;
    private CancellationTokenSource? cancellationTokenSource;

    [Inject] HttpClient Http { get; set; } = null!;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(NewMessage))
            return;

        var message = new ChatMessage { User = Username, Message = NewMessage + " 🙂" };

        isSending = true;
        StateHasChanged();

        await Http.PostAsJsonAsync("/api/SendMessage", message);
        NewMessage = "";

        await Task.Delay(3000);

        await LoadMessages();

        isSending = false;
        StateHasChanged();
    }

    private async Task LoadMessages()
    {
        var newMessages = await Http.GetFromJsonAsync<List<ChatMessage>>("/api/GetMessages") ?? new();
        if (newMessages.Count != Messages.Count) // Undgå unødvendig UI-opdatering
        {
            Messages = newMessages;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cancellationTokenSource = new CancellationTokenSource();

        // Start baggrundsopgave der opdaterer beskeder hver 5. sekund
        _ = Task.Run(async () =>
        {
            while (!cancellationTokenSource.Token.IsCancellationRequested)
            {
                await LoadMessages();
                await Task.Delay(5000, cancellationTokenSource.Token);
            }
        });
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
    }
}
